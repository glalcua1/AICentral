'use client'

import { useState } from 'react'
import { X, Upload, Link as LinkIcon, Users, Target, Lightbulb, Image, AlertCircle } from 'lucide-react'

interface ProjectSubmissionModalProps {
  isOpen: boolean
  onClose: () => void
}

interface ProjectFormData {
  projectName: string
  objective: string
  impact: string
  team: string
  description: string
  category: string
  status: string
  timeline: string
  budget: string
  technologies: string
  link: string
  screenshots: File[]
}

export default function ProjectSubmissionModal({ isOpen, onClose }: ProjectSubmissionModalProps) {
  const [formData, setFormData] = useState<ProjectFormData>({
    projectName: '',
    objective: '',
    impact: '',
    team: '',
    description: '',
    category: '',
    status: '',
    timeline: '',
    budget: '',
    technologies: '',
    link: '',
    screenshots: []
  })

  const [dragActive, setDragActive] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Partial<ProjectFormData>>({})

  if (!isOpen) return null

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
    // Clear error when user starts typing
    if (errors[name as keyof ProjectFormData]) {
      setErrors(prev => ({ ...prev, [name]: undefined }))
    }
  }

  const handleFileUpload = (files: FileList | null) => {
    if (files) {
      const newFiles = Array.from(files).filter(file => 
        file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024 // 5MB limit
      )
      setFormData(prev => ({ 
        ...prev, 
        screenshots: [...prev.screenshots, ...newFiles].slice(0, 5) // Max 5 files
      }))
    }
  }

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true)
    } else if (e.type === "dragleave") {
      setDragActive(false)
    }
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)
    handleFileUpload(e.dataTransfer.files)
  }

  const removeFile = (index: number) => {
    setFormData(prev => ({
      ...prev,
      screenshots: prev.screenshots.filter((_, i) => i !== index)
    }))
  }

  const validateForm = () => {
    const newErrors: Partial<ProjectFormData> = {}
    
    if (!formData.projectName.trim()) newErrors.projectName = 'Project name is required'
    if (!formData.objective.trim()) newErrors.objective = 'Objective is required'
    if (!formData.impact.trim()) newErrors.impact = 'Impact description is required'
    if (!formData.team.trim()) newErrors.team = 'Team information is required'
    if (!formData.description.trim()) newErrors.description = 'Description is required'
    if (!formData.category) newErrors.category = 'Category is required'
    if (!formData.status) newErrors.status = 'Status is required'
    
    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return
    
    setIsSubmitting(true)
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Create project submission data
      const submissionData = {
        ...formData,
        id: Date.now(), // In real app, this would be generated by the backend
        status: 'pending' as const,
        submittedBy: 'user@company.com', // In real app, this would come from auth
        submittedAt: new Date().toISOString(),
        screenshots: formData.screenshots.map(file => URL.createObjectURL(file)), // In real app, files would be uploaded
        likes: 0,
        views: 0
      }
      
      console.log('Project submitted for approval:', submissionData)
      
      // Show success message
      alert('Project submitted successfully! It will be reviewed by our team and you\'ll be notified of the approval status.')
      
      setIsSubmitting(false)
      onClose()
      
      // Reset form
      setFormData({
        projectName: '',
        objective: '',
        impact: '',
        team: '',
        description: '',
        category: '',
        status: '',
        timeline: '',
        budget: '',
        technologies: '',
        link: '',
        screenshots: []
      })
      
      // Redirect to My Projects page
      setTimeout(() => {
        window.location.href = '/my-projects'
      }, 1000)
      
    } catch (error) {
      console.error('Submission error:', error)
      alert('There was an error submitting your project. Please try again.')
      setIsSubmitting(false)
    }
  }

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center p-4">
        {/* Backdrop */}
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity"
          onClick={onClose}
        />
        
        {/* Modal */}
        <div className="relative w-full max-w-4xl bg-white rounded-2xl shadow-2xl animate-scale-in max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 rounded-t-2xl">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="heading-3 text-gray-900">Submit AI Project</h2>
                <p className="text-body text-gray-600 mt-1">Share your AI project with the community</p>
              </div>
              <button
                onClick={onClose}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Basic Information */}
            <div className="space-y-4">
              <h3 className="heading-4 text-gray-900 flex items-center">
                <Lightbulb className="w-5 h-5 mr-2 text-primary-600" />
                Project Information
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Project Name *
                  </label>
                  <input
                    type="text"
                    name="projectName"
                    value={formData.projectName}
                    onChange={handleInputChange}
                    className={`input ${errors.projectName ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                    placeholder="Enter project name"
                  />
                  {errors.projectName && (
                    <p className="mt-1 text-sm text-red-600 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {errors.projectName}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Category *
                  </label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleInputChange}
                    className={`input ${errors.category ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                  >
                    <option value="">Select category</option>
                    <option value="machine-learning">Machine Learning</option>
                    <option value="nlp">Natural Language Processing</option>
                    <option value="computer-vision">Computer Vision</option>
                    <option value="automation">Process Automation</option>
                    <option value="analytics">Data Analytics</option>
                    <option value="chatbots">Chatbots & Virtual Assistants</option>
                    <option value="other">Other</option>
                  </select>
                  {errors.category && (
                    <p className="mt-1 text-sm text-red-600 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {errors.category}
                    </p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Project Description *
                </label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={3}
                  className={`input ${errors.description ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                  placeholder="Provide a detailed description of your AI project..."
                />
                {errors.description && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.description}
                  </p>
                )}
              </div>
            </div>

            {/* Objective & Impact */}
            <div className="space-y-4">
              <h3 className="heading-4 text-gray-900 flex items-center">
                <Target className="w-5 h-5 mr-2 text-primary-600" />
                Objective & Impact
              </h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Project Objective *
                </label>
                <textarea
                  name="objective"
                  value={formData.objective}
                  onChange={handleInputChange}
                  rows={2}
                  className={`input ${errors.objective ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                  placeholder="What problem does this project solve? What are the main goals?"
                />
                {errors.objective && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.objective}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Expected Impact *
                </label>
                <textarea
                  name="impact"
                  value={formData.impact}
                  onChange={handleInputChange}
                  rows={2}
                  className={`input ${errors.impact ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                  placeholder="Describe the expected business impact, efficiency gains, cost savings, etc."
                />
                {errors.impact && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.impact}
                  </p>
                )}
              </div>
            </div>

            {/* Team & Timeline */}
            <div className="space-y-4">
              <h3 className="heading-4 text-gray-900 flex items-center">
                <Users className="w-5 h-5 mr-2 text-primary-600" />
                Team & Timeline
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Team Members *
                  </label>
                  <textarea
                    name="team"
                    value={formData.team}
                    onChange={handleInputChange}
                    rows={2}
                    className={`input ${errors.team ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                    placeholder="List team members and their roles"
                  />
                  {errors.team && (
                    <p className="mt-1 text-sm text-red-600 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {errors.team}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Status *
                  </label>
                  <select
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    className={`input ${errors.status ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
                  >
                    <option value="">Select status</option>
                    <option value="planning">Planning</option>
                    <option value="development">In Development</option>
                    <option value="testing">Testing</option>
                    <option value="deployment">Deployment</option>
                    <option value="completed">Completed</option>
                  </select>
                  {errors.status && (
                    <p className="mt-1 text-sm text-red-600 flex items-center">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      {errors.status}
                    </p>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Timeline
                  </label>
                  <input
                    type="text"
                    name="timeline"
                    value={formData.timeline}
                    onChange={handleInputChange}
                    className="input"
                    placeholder="e.g., 3 months"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Budget Range
                  </label>
                  <input
                    type="text"
                    name="budget"
                    value={formData.budget}
                    onChange={handleInputChange}
                    className="input"
                    placeholder="e.g., $10k - $50k"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Technologies
                  </label>
                  <input
                    type="text"
                    name="technologies"
                    value={formData.technologies}
                    onChange={handleInputChange}
                    className="input"
                    placeholder="e.g., TensorFlow, Python"
                  />
                </div>
              </div>
            </div>

            {/* Files & Links */}
            <div className="space-y-4">
              <h3 className="heading-4 text-gray-900 flex items-center">
                <Image className="w-5 h-5 mr-2 text-primary-600" />
                Screenshots & Links
              </h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Project Link
                </label>
                <div className="relative">
                  <LinkIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="url"
                    name="link"
                    value={formData.link}
                    onChange={handleInputChange}
                    className="input pl-10"
                    placeholder="https://github.com/yourproject or demo link"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Screenshots (Max 5, up to 5MB each)
                </label>
                <div
                  className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                    dragActive 
                      ? 'border-primary-500 bg-primary-50' 
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={handleDrop}
                >
                  <Upload className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600 mb-2">
                    Drag and drop screenshots here, or{' '}
                    <label className="text-primary-600 hover:text-primary-700 cursor-pointer font-medium">
                      browse files
                      <input
                        type="file"
                        multiple
                        accept="image/*"
                        className="hidden"
                        onChange={(e) => handleFileUpload(e.target.files)}
                      />
                    </label>
                  </p>
                  <p className="text-xs text-gray-400">PNG, JPG, GIF up to 5MB</p>
                </div>

                {/* File Preview */}
                {formData.screenshots.length > 0 && (
                  <div className="mt-4 grid grid-cols-2 md:grid-cols-5 gap-4">
                    {formData.screenshots.map((file, index) => (
                      <div key={index} className="relative group">
                                                 <img
                           src={URL.createObjectURL(file)}
                           alt={`Project screenshot ${index + 1}: ${file.name}`}
                           className="w-full h-20 object-cover rounded-lg border border-gray-200"
                         />
                        <button
                          type="button"
                          onClick={() => removeFile(index)}
                          className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          <X className="w-3 h-3" />
                        </button>
                        <p className="text-xs text-gray-500 mt-1 truncate">{file.name}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>

            {/* Submit Buttons */}
            <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={onClose}
                className="btn-secondary"
                disabled={isSubmitting}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="btn-primary"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <div className="flex items-center">
                    <div className="w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin mr-2" />
                    Submitting...
                  </div>
                ) : (
                  'Submit Project'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
} 